/*
Copyright (c) 2024  Blue Robotics

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package com.bluerobotics.blueberry.schema.parser.writers;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.bluerobotics.blueberry.schema.parser.constants.Constant;
import com.bluerobotics.blueberry.schema.parser.fields.ArrayField;
import com.bluerobotics.blueberry.schema.parser.fields.Field;
import com.bluerobotics.blueberry.schema.parser.fields.FieldList;
import com.bluerobotics.blueberry.schema.parser.fields.SymbolName;
import com.bluerobotics.blueberry.schema.parser.parsing.BlueberrySchemaParser;
import com.bluerobotics.blueberry.schema.parser.fields.StructField;

/**
 * This class provides useful functionality for generating source files, without any specific language implementation
 */
public abstract class SourceWriter {
	protected final File m_directory;
	private static final String INDENT_STRING = "\t";


	protected StringBuffer m_buffer = new StringBuffer();
	protected final String m_fileHeader;
	protected final BlueberrySchemaParser m_parser;
	protected int m_indent = 0;
	public SourceWriter(File dir, BlueberrySchemaParser parser, String header) {
		if(!dir.exists()) {
			dir.mkdir();
			m_directory = dir;
		} else if(!dir.isDirectory()) {
			throw new RuntimeException("Specified file location is not a directory!");
		} else {
			m_directory = dir;
		}
		m_parser = parser;
		m_fileHeader = header;
	}
	/**
	 * Main method that triggers the generation of all files for the specified messages and defines
	 * Probably only enums will trigger code output from the define list.
	 * @param messages
	 * @param defines
	 * @param headers
	 */
	public abstract void write();

	protected void indent() {
		++m_indent;
	}
	protected void outdent() {
		--m_indent;
	}
	protected void closeBrace() {
		outdent();
		addLine("}");
	}
	protected void writeToFile(String name, String extension) {
		File f = new File(m_directory, name+"."+extension);
		File p = f.getParentFile();
		if(!p.exists()) {
			p.mkdirs();
		}
		BufferedWriter w = null;
		try {
			w = new BufferedWriter(new FileWriter(f));
			w.append(getBuffer());
			w.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}
	protected void startFile(String... hs) {
		clear();
		for(String h : hs) {
			addBlockComment(h);
		}
		addSectionDivider("ATTENTION! THIS FILE WAS AUTOGENERATED BY THE BLUEBERRY SCHEMA PARSER.\nIt's probably not a good idea to modify it. :-P");
	}
	protected void add(String s) {
		m_buffer.append(s);
	}
	protected void clear() {
		m_buffer = new StringBuffer();
	}
	protected void addLine(){
		add("\n");

	}
	protected void addIndent(){
		add(INDENT_STRING.repeat(m_indent));

	}
	protected StringBuffer getBuffer() {
		return m_buffer;
	}
	/**
	 * adds the specified line and adds indents as appropriate
	 * @param s
	 */
	protected void addLine(String s) {
		addIndent();
		add(s);
		addLine();
	}
	/**
	 * adds multiple lines - assuming that specified string includes newline characters
	 * Indents to each line will be added as appropriate
	 * @param s
	 */
	protected void addLines(String lines) {
		String[] ss = lines.split("\\n");
		for(String s : ss) {
			addLine(s);
		}
	}
	protected void addLineComment(String c) {
		addLine("//"+c);
	}

	protected void addDocComment(String... cs) {
		addBlockComment(true, cs);
	}
	protected void addBlockComment(String... cs) {
		addBlockComment(false, cs);
	}
	/**
	 * Adds some block comments
	 * @param docNotBlock
	 * @param c
	 */
	private void addBlockComment(boolean docNotBlock, String... cs) {
		String c = "";
		for(String ct : cs) {
			if(!ct.isBlank()) {
				c += ct + "\n";
			}
		}
		if(!c.isBlank()) {

			String[] ss = c.split("\\R");
			int n = ss.length - 1;
			String startToken = docNotBlock ? "/**" : "/*";
			if(!c.isBlank()){
				for(int i = 0; i <= n; ++i) {
					if(i == 0) {
						addLine(startToken);
					}
//					addLine();
					addLine(" * "+ss[i]);
					if(i == n) {
						addLine(" */");
					}
				}
			}
		}
	}

	protected void addSectionDivider(String title) {
		String[] ss = title.split("\\R");
		addLine();
		addLineComment("*************************************************************************************");
		if(!title.isBlank()) {
			for(String s : ss) {
				addLineComment(s);
			}
			addLineComment("*************************************************************************************");
		}
		addLine();
	}
	/**
	 * creates a fully qualified field name that can be used to make function names and constants for indexing
	 * @param bf - the field in question
	 * @return a field name that consists of the field name plus names of it's parent(s)
	 */
	protected SymbolName makeBaseFieldNameRoot(Field bf) {
		SymbolName result = null;
//		result = bf.getCorrectParentName().addSuffix(bf.getName());

		return result;
	}
	/**
	 * creates a list of all array fields defined in the schema
	 * @param top - the top level field in the schema
	 * @return a list of array fields
	 */
	public List<ArrayField> getArrayFields(StructField top){
		ArrayList<ArrayField> afs = new ArrayList<ArrayField>();
		top.scanThroughFields(bf -> {
			if(bf instanceof ArrayField) {
				afs.add((ArrayField)bf);
			}
		});
		return afs;
	}
	protected BlueberrySchemaParser getParser() {
		return m_parser;
	}
	protected String getHeader() {
		return m_fileHeader;
	}



}
