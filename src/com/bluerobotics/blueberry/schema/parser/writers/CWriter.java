/*
Copyright (c) 2024  Blue Robotics

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package com.bluerobotics.blueberry.schema.parser.writers;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import javax.naming.NameAlreadyBoundException;

import com.bluerobotics.blueberry.schema.parser.structure.BaseField;
import com.bluerobotics.blueberry.schema.parser.structure.BlockField;
import com.bluerobotics.blueberry.schema.parser.structure.BoolField;
import com.bluerobotics.blueberry.schema.parser.structure.BoolFieldField;
import com.bluerobotics.blueberry.schema.parser.structure.CompoundField;
import com.bluerobotics.blueberry.schema.parser.structure.EnumField;
import com.bluerobotics.blueberry.schema.parser.structure.EnumField.NameValue;
import com.bluerobotics.blueberry.schema.parser.structure.Field;
import com.bluerobotics.blueberry.schema.parser.structure.AbstractField;
import com.bluerobotics.blueberry.schema.parser.structure.ArrayField;
import com.bluerobotics.blueberry.schema.parser.structure.FieldName;
import com.bluerobotics.blueberry.schema.parser.structure.FieldUtils;
import com.bluerobotics.blueberry.schema.parser.structure.FixedIntField;
import com.bluerobotics.blueberry.schema.parser.structure.ParentField;
import com.bluerobotics.blueberry.schema.parser.structure.Type;

public class CWriter extends SourceWriter {

	public CWriter(File dir) {
		super(dir);
	}

	@Override
	public void write(BlockField bf, String... headers) {
		
		
			makeHeaderFile(bf, headers);
			makeSourceFile(bf, headers);
		
		
	}
	private void makeHeaderFile(BlockField top, String... hs) {
//		List<BlockField> bfs = top.getBlockFields();
		startFile(hs);
	
		
		
		addSectionDivider("Includes");
		addLine("#include <stdbool.h");
		addLine("#include <stdint.h");
	
		addSectionDivider("Defines");
		
		addBlockKeyDefines(top);
		
		
		addSectionDivider("Types");
		writeEnums(top);
		addLine("typedef BlueberryBlock Bb;");
//		writeCompounds(top);
		
		addSectionDivider("Function Prototypes");
		addHeaderFieldGetters(top,true);

		addBaseFieldGetters(top, true);
		
		addBlockFunctionGetters(top, true);
		
		addBlockAdders(top, true);
		
		addArrayAdders(top, true);

		
		
		
		
		writeToFile(top.getName().toUpperCamel(),"h");
		
	}


	private void startFile(String... hs) {
		clear();
		for(String h : hs) {
			addBlockComment(h);
		}
		addSectionDivider("ATTENTION! THIS IS AN AUTOGENERATED FILE.\nIt's probably not a good idea to modify it. :^)");
	}
	private void makeSourceFile(BlockField top, String... hs) {
		startFile(hs);
	
		
		
		addSectionDivider("Includes");
		addLine("#include <stdbool.h");
		addLine("#include <stdint.h");
	
		addSectionDivider("Defines");
		writeHeaderDefines(top);
		addLine();
		addLine();
		writeBaseFieldDefines(top);
		
		addSectionDivider("Types");
		

		
		addSectionDivider("Function Prototypes");
//		addBlockFunctionAdder(top, true);
	
		addSectionDivider("Source");
		
		addHeaderFieldGetters(top,false);
		addBaseFieldGetters(top, false);
		
		addBlockFunctionGetters(top, false);
//		addBlockFunctionAdder(top, false);
		
		addBlockAdders(top, false);
		
		addArrayAdders(top, false);
		
		
		writeToFile(top.getName().toUpperCamel(),"c");
	
	}
	

	
	private void writeEnums(BlockField top) {
		//first make a list of all unique enums
		ArrayList<EnumField> es = new ArrayList<EnumField>();
		top.scanThroughBaseFields((f) -> {
			if(f instanceof EnumField) {
				EnumField e = (EnumField)f;
				boolean found = false;
				//check that this new one isn't the same as an existing one
				for(EnumField ef : es) {
					if(ef.getTypeName().equals(e)) {
						found = true;
						break;
					}
				}
				if(!found) {
					es.add(e);
				}
			}
		}, true);	
		for(EnumField ef : es) {
			addDocComment(ef.getComment());
			addLine("typedef enum {");
			
			indent();
			for(NameValue nv : ef.getNameValues()) {
				
				
				String c = nv.getComment();
				if(c != null && !c.isBlank()) {
					c = "// "+c;
				} else {
					c = "";
				}
				addLine(nv.getName().toUpperSnake() + " = " + nv.getValue() + c);
				
				
			}
			outdent();
			
			addLine("} "+ef.getTypeName().toUpperCamel());
			
			addLine();

		}
	}
	


	private void writeBaseFieldDefines(BlockField top) {
		top.scanThroughBaseFields((f) -> {
			writeDefine(f);
		}, false);	
//		top.getBaseFields().forEach(f -> writeDefine(f));
	}
	private void writeHeaderDefines(BlockField top) {
	
		//first scan through header fields and get all unique ones
		ArrayList<BaseField> hfs = new ArrayList<BaseField>();
		top.scanThroughHeaderFields(bf -> {
			if(bf.getName() != null) {
				boolean found = false;
				for(BaseField f : hfs) {
					if(f.getName().equals(bf.getName())) {
						if(f.getCorrectParentName().equals(bf.getCorrectParentName())){
							found = true;
						}
					}
				}
				if(!found) {
					hfs.add(bf);
				}
			}
		}, true);
		
		//now write defines
		hfs.forEach(bf -> writeDefine(bf));
		
	}
	

	

	private void writeDefine(BaseField bf) {
		if(bf.getName() == null || bf.getParent() == null) {
			return;
		}
		if(bf instanceof BoolFieldField) {
			//don't do anything
		} else if(bf instanceof CompoundField) {
			//probably also don't do anything
		} else if(bf instanceof BoolField) {
			//do the byte index and the bit index
			writeDefine(makeBaseFieldNameRoot(bf).addSuffix("INDEX").toUpperSnake(), ""+((BoolFieldField)(bf.getParent())).getIndex(),bf);
			writeDefine(makeBaseFieldNameRoot(bf).addSuffix("BIT").toUpperSnake(), ""+bf.getIndex(),bf);
			writeDefine(makeBaseFieldNameRoot(bf).addSuffix("MASK").toUpperSnake(), "1 << "+bf.getIndex(),bf);

		} else {
			writeDefine(makeBaseFieldNameRoot(bf).addSuffix("INDEX").toUpperSnake(), ""+bf.getIndex(),bf);
		}
		
	}

	private void writeDefine(String name, String value, BaseField commentField) {
		String comment = commentField != null ? commentField.getComment() : "";
		if(comment == null) {
			comment = "";
		}
		boolean multiLine = comment.split("\\R").length > 1 ;
		String c = "";
		if(multiLine) {
			addBlockComment(comment);
		} else {
			String s = comment;
			if(!s.isBlank()) {
				c = "    //"+comment;
			}
		}
		addIndent();
		add("#define ");
		add(name);
		add(" (" + value + ")");
		if(!c.isEmpty()) {
			add(c);
		}
		addLine();
		
	}
	
	private void addHeaderFieldGetters(BlockField top, boolean protoNotDeclaration) {
		ArrayList<BlockField> bfs = new ArrayList<BlockField>();
		//first find all blockfields with unique types
		top.scanThroughBlockFields((bf) -> {
			boolean found = false;
			for(BlockField bft : bfs) {
				if(bft.getTypeName().equals(bf.getTypeName())) {
					found = true;
					break;
				}
			}
			if(!found) {
				bfs.add(bf);
			}
		});
		
		//now do the stuff
		for(BlockField bf : bfs) {
			bf.scanThroughHeaderFields(f -> {
				if(f.getName() != null) {
					addBaseGetter(f, protoNotDeclaration);
					if(!protoNotDeclaration) {
						if(f.getName() != null) {
							indent();
							addBaseGetterGuts(f);
							outdent();
						}
					}
				}
			}, false);
		}
		
		
		top.scanThroughHeaderFields(f -> {
			if(f instanceof BoolField) {
				addBoolGetter((BoolField)f, protoNotDeclaration);
			
			} else if(f instanceof CompoundField) {
				addCompoundGetterPrototype((CompoundField)f, top, protoNotDeclaration);
			} else {
				addBaseGetter(f, protoNotDeclaration);
				if(!protoNotDeclaration) {
					if(f.getName() != null) {
						indent();
						addBaseGetterGuts(f);
						outdent();
						addLine("}");
					}
				}
			}
		}, false);
	}

	private void addBaseFieldGetters(BlockField top, boolean protoNotDeclaration) {
		ArrayList<BlockField> bfs = new ArrayList<BlockField>();
		top.scanThroughBlockFields(bf -> {
			if(!(bf instanceof ArrayField)) {
				bfs.add(bf);
			}
		});
		for(BlockField bf : bfs) {
			for(BaseField f : bf.getNamedBaseFields()) {
				if(f instanceof BoolField) {
					addBoolGetter((BoolField)f, protoNotDeclaration);
				
				} else if(f instanceof CompoundField) {
					addCompoundGetterPrototype((CompoundField)f, top, protoNotDeclaration);
				} else {
					addBaseGetter(f, protoNotDeclaration);
					if(!protoNotDeclaration) {
						if(f.getName() != null) {
							indent();
							addBaseGetterGuts(f);
							outdent();
							addLine("}");

						}
					}
				}
			}
		}
	
	}
	private void addCompoundGetterPrototype(CompoundField f, BlockField top, boolean protoNotDeclaration) {
		// TODO Auto-generated method stub
		
	}

	private void addBoolGetter(BoolField b, boolean protoNotDeclaration) {
		
		addBaseGetter(b, protoNotDeclaration);
		if(!protoNotDeclaration) {
			indent();
			addBoolGetterGuts(b);
			outdent();
			addLine("}");
		}
	
		
		
		
	}

	private void addBaseGetter(BaseField f, boolean protoNotDeclaration) {
		if(f.getName() != null) {

			String gs = "get";
			String c = f.getName().toLowerCamel()+" field of the " + f.getCorrectParentName().toLowerCamel() + " " + f.getCorrectParentName().toUpperCamel()+ "\n"+f.getComment();
			String rt = getBaseType(f);
			String function = makeBaseFieldNameRoot(f).toUpperCamel();
			String paramType = "BbBlock";
			String paramName = f.getCorrectParentName().toLowerCamel();
			addDocComment( gs + "s the " + c);
			
			
			
			String s = rt;
			s += " " + gs + "Bb" + function + "(Bb* buf, " + paramType + " " + paramName;
			s += ")";
			s += protoNotDeclaration ? ";" : "{";
			addLine(s);

			
		}
	}
	private boolean isInArray(BaseField f) {
		Field cw = f.getContainingWord();
		BlockField bf = (BlockField)cw.getParent();//this must be true I think
		return (bf instanceof ArrayField);
	}
	private void addBaseSetterGuts(BaseField f) {
		String rt = getBaseType(f);
		String paramName = f.getCorrectParentName().toLowerCamel();
		String dn = makeBaseFieldNameRoot(f).addSuffix("INDEX").toUpperSnake();

	

		String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("bb").addPrefix("set").toLowerCamel();
		addLine(functionName + "(buf, " + paramName + ", " + dn + ", " + f.getName().toLowerCamel() + ");");
			
			
		
	
	}
	private void addBaseGetterGuts(BaseField f) {
		String rt = getBaseType(f);
		String paramName = f.getCorrectParentName().toLowerCamel();
		String dn = makeBaseFieldNameRoot(f).addSuffix("INDEX").toUpperSnake();

	
	
			
		String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("bb").addPrefix("get").toLowerCamel();
		addLine("return " + functionName + "(buf, " + paramName + ", " + dn +  ");");
		
		
		
	}
	private void addBoolSetterGuts(BaseField f) {
		String paramName = f.getCorrectParentName().toLowerCamel();
		String dn = makeBaseFieldNameRoot(f).addSuffix("INDEX").toUpperSnake();
		String dbn = makeBaseFieldNameRoot(f).addSuffix("MASK").toUpperSnake();
		String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("set").toLowerCamel();
		addLine(functionName + "(buf, " + paramName + ", " + dn + ", " + dbn + ", " + f.getName().toLowerCamel() + ");");
	}
	private void addBoolGetterGuts(BaseField f) {
		String paramName = f.getCorrectParentName().toLowerCamel();
		String dn = makeBaseFieldNameRoot(f).addSuffix("INDEX").toUpperSnake();
		String dbn = makeBaseFieldNameRoot(f).addSuffix("MASK").toUpperSnake();
	
			
		String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("get").toLowerCamel();
		
		addLine("return " + functionName + "(buf, " + paramName + ", " + dn + ", " + dbn + ");");
		
		
	
			
			
		
	}
	
	private void addBlockFunctionAdder(BlockField top, boolean protoNotDeclaration) {
		ArrayList<BlockField> fields = new ArrayList<BlockField>();
		//first scan for all blockfields with unique type names
		top.scanThroughBlockFields(bf -> {
			if(bf != top) {
				boolean found = false;
				for(BlockField f : fields) {
					
					if(f.getTypeName().equals(bf.getTypeName())) {
						found = true;
						break;
					}
				}
				if(!found) {
					fields.add(bf);
				}
			}
		});
		
		//now build the functions using the first block.
		if(fields.size() > 0) {
			BlockField bf = fields.get(0);
			FieldName tn = bf.getTypeName();
			FieldName functionName = tn.addPrefix("next").addPrefix("add");
			String f = "BbBlock " + functionName.toLowerCamel()+"(Bb* buf, BbBlock block)";
			addDocComment("computes the index of the next new block given the previous one.");
			BaseField lf = null; //length field
			for(BaseField bft : bf.getHeaderFields()) {
				if(bft instanceof CompoundField) {
					CompoundField cf = (CompoundField)bft;
					for(BaseField bf2 : cf.getBaseFields()) {
						if(bf2.getName() != null && bf2.getName().toLowerCamel().equals("length")) {
							lf = bf2;
							break;
						}
					}
				}
				if(lf != null) {
					break;
				} else if(bft.getName() != null && bft.getName().toLowerCamel().equals("length")) {
					lf = bft;
					break;
				}
			}
			
			if(lf == null || lf.getName() == null) {
				throw new RuntimeException("No length field found!");
			}

			if(protoNotDeclaration) {
				addLine(f + ";");
			} else {
				addLine(f + "{");
				indent();
//				addLine();
				//build the function name
//				BbBlock addPayload(Bb* buf, BbBlock prevPayload){
				
				//Packet packet = buf->start;
				//uint16_t pLen = getUint16(buf, PACKET_LENGTH_INDEX); 
				//Payload 
				
				addLine(top.getTypeName().toUpperCamel()+" p = buff->start;");
				String lenType = getBaseType(lf);
//				addLine(lenType + " pLen = "+new FieldName("get",lenType).toLowerCamel()+"(buf, ");

				
				
				String lgn = tn.addPrefix("get").addSuffix(lf.getName()).toLowerCamel();
//				String ldn = 
				addLine(getBaseType(lf) + " len " + lgn + "(buf,  block);");//this gets the block length
				
				addLine("return bbWrap(buf, block + len);");
				outdent();
				addLine("}");
			}
			
			
			
			
			
		}
	}
	
	private void addBlockFunctionGetters(BlockField top, boolean protoNotDeclaration) {
		ArrayList<BlockField> fields = new ArrayList<BlockField>();
		//first scan for all blockfields with unique type names
		top.scanThroughBlockFields(bf -> {
			if(bf != top) {
				boolean found = false;
				for(BlockField f : fields) {
					
					if(f.getTypeName().equals(bf.getTypeName())) {
						found = true;
						break;
					}
				}
				if(!found) {
					fields.add(bf);
				}
			}
		});
		
		//now build the functions using the first block.
		if(fields.size() > 0) {
			BlockField bf = fields.get(0);
			FieldName tn = bf.getTypeName();
			FieldName getterName = tn.addPrefix("next").addPrefix("get");
			FieldName setterName = tn.addPrefix("next").addPrefix("set");
			String f = "BbBlock " + getterName.toLowerCamel()+"(Bb* buf, BbBlock block)";
			addDocComment("computes the index of the next block given the previous one.");
			BaseField lf = null;
			for(BaseField bft : bf.getHeaderFields()) {
				if(bft instanceof CompoundField) {
					CompoundField cf = (CompoundField)bft;
					for(BaseField bf2 : cf.getBaseFields()) {
						if(bf2.getName() != null && bf2.getName().toLowerCamel().equals("length")) {
							lf = bf2;
							break;
						}
					}
				}
				if(lf != null) {
					break;
				} else if(bft.getName() != null && bft.getName().toLowerCamel().equals("length")) {
					lf = bft;
					break;
				}
			}
			
			if(lf == null || lf.getName() == null) {
				throw new RuntimeException("No length field found!");
			}

			if(protoNotDeclaration) {
				addLine(f + ";");
			} else {
				addLine(f + "{");
				indent();
//				addLine();
				//build the function name
				String lgn = tn.addPrefix("get").addSuffix(lf.getName()).toLowerCamel();
//				String ldn = 
				addLine(getBaseType(lf) + " len " + lgn + "(buf,  block);");//this gets the block length
				addLine("return bbWrap(buf, block + len);");
				outdent();
				addLine("}");
			}
			
			
			
			
			
		}
	}
	
	
	private String getBaseType(BaseField f) {
		Type t = f.getType();
		String rt = "";
		switch(t) {
		case COMPOUND:
		case ARRAY:
		case BLOCK:
			break;
		case BOOL:
			rt = "bool";
			break;
		case BOOLFIELD:
			rt = "uint8_t";
			break;
		case FLOAT32:
			rt = "float";
			break;
		case INT16:
			rt = "int16_t";
			break;
		case INT32:
			rt = "int32_t";
			break;
		case INT8:
			rt = "int8_t";
			break;
		case UINT16:
			rt = "uint16_t";
			break;
		case UINT32:
			rt = "uint32_t";
			break;
		case UINT8:
			rt = "uint8_t";
			break;
		default:
			break;
		
		}
		return rt;
	}
	
	
	private void addBlockKeyDefines(BlockField top) {
		List<FixedIntField> keys = getBlockKeys(top);
		
		for(FixedIntField key : keys) {
			String name = makeBaseFieldNameRoot(key).toUpperSnake();
			writeDefine(name, ""+key.getValue(), key);
		}
	}
	
	private void addBlockAdders(BlockField top, boolean protoNotDeclaration) {
		//first get all blocks that we want to make adders for
		List<BlockField> bfs = top.getAllBlockFields();
		
		for(BlockField bf : bfs) {
			addBlockAdder(bf, true, protoNotDeclaration);
		}
	}
	private void addArrayAdders(BlockField top, boolean protoNotDeclaration) {
		List<ArrayField> afs = top.getAllArrayFields();
		for(ArrayField af : afs) {
			addArrayAdder(af, protoNotDeclaration);
		}
	}
	
	
	
	private void addArrayAdder(ArrayField bf, boolean protoNotDeclaration) {
		String blockName = bf.getName().toUpperCamel();
		String comment = "Adds a new "+blockName+" to the specified packet.\n"+bf.getComment();
		String functionName = "add"+blockName;
		List<BaseField> fs = bf.getNamedBaseFields();
		String paramList = "";
		
		
		for(BaseField f : fs) {
			paramList += ", "+getBaseType(f)+" "+f.getName().toLowerCamel();
		}
		
		addDocComment(comment);
		addLine("BbBlock "+functionName+"(Bb* buf, BbBlock previousBlock"+paramList+")"+(protoNotDeclaration ? ";" : "{"));
		if(!protoNotDeclaration) {
			indent();
			
			//now fill in the details
			BaseField lf = bf.getHeaderField("length");
			BaseField keyField = bf.getHeaderField("key");
			
			FieldName tn = bf.getTypeName();
			
			int blockLen = bf.getHeaderWordCount() + bf.getBaseWordCount();

			if(lf == null) {
				throw new RuntimeException("No length field found!");
			}
			if(keyField == null) {
				throw new RuntimeException("No key field found!");
			}
			
			String keyValue = makeBaseFieldNameRoot(keyField).toUpperSnake();
			String keyIndex = makeBaseFieldNameRoot(keyField).addSuffix("INDEX").toUpperSnake();
			String keyFuncName = FieldName.fromCamel("setBb").addSuffix(keyField.getType().name()).toLowerCamel();
			
			String lenValue = ""+blockLen;
			String lenIndex = makeBaseFieldNameRoot(lf).addSuffix("INDEX").toUpperSnake();
			String lenFuncName = FieldName.fromCamel("setBb").addSuffix(lf.getType().name()).toLowerCamel();
			
			
			
			//first setup index
			addLineComment("Compute index of new block");
			addLine(bf.getTypeName().toUpperCamel()+" p = buff->start;");
			String lenType = getBaseType(lf);

			
			
			String lgn = tn.addPrefix("get").addSuffix(lf.getName()).toLowerCamel();
			addLine(getBaseType(lf) + " len = " + lgn + "(buf,  previousBlock);");//this gets the block length
			addLine("BbBlock result = bbWrap(buf, block + len);");
			
			
		
			
			
			//first do the header stuff
			addLine();
			addLineComment("Add header fields");
			//write the key
			addLine(keyFuncName+"(buf, result, "+keyIndex+", "+keyValue+");");
			//write the length
			addLine(lenFuncName+"(buf, result, "+lenIndex+", "+lenValue+"); //sorry about the magic number. :(");
			
			
			//then do the params 
		
			addLine();
			addLineComment("Add base fields");
			
			for(BaseField f : fs) {

				if(f instanceof BoolField) {
					addBoolSetterGuts(f);
				} else {
					addBaseSetterGuts(f);
				}
			}
				
				
			
			
			
			//update the block length
			
			
			//return the new block index
			addLine("return result");
			
			
			outdent();
			addLine("}");
		}
	}

	private void addBlockAdder(BlockField bf, boolean withParamsNotWithout, boolean protoNotDeclaration) {
		String blockName = bf.getName().toUpperCamel();
		String comment = "Adds a new "+blockName+" to the specified packet.\n"+bf.getComment();
		String functionName = "add"+blockName;
		List<BaseField> fs = bf.getNamedBaseFields();
		String paramList = "";
		if(withParamsNotWithout && fs.size() == 0) {
			//don't do anything if this block does not have parameters but we're doing the version with params
			return;
		}
		if(withParamsNotWithout) {
			for(BaseField f : fs) {
				paramList += ", "+getBaseType(f)+" "+f.getName().toLowerCamel();
			}
		}
		addDocComment(comment);
		addLine("BbBlock "+functionName+"(Bb* buf, BbBlock previousBlock"+paramList+")"+(protoNotDeclaration ? ";" : "{"));
		if(!protoNotDeclaration) {
			indent();
			
			//now fill in the details
			BaseField lf = bf.getHeaderField("length");
			BaseField keyField = bf.getHeaderField("key");
			
			FieldName tn = bf.getTypeName();
			
			int blockLen = bf.getHeaderWordCount() + (withParamsNotWithout ? bf.getBaseWordCount() : 0);

			if(lf == null) {
				throw new RuntimeException("No length field found!");
			}
			if(keyField == null) {
				throw new RuntimeException("No key field found!");
			}
			
			String keyValue = makeBaseFieldNameRoot(keyField).toUpperSnake();
			String keyIndex = makeBaseFieldNameRoot(keyField).addSuffix("INDEX").toUpperSnake();
			String keyFuncName = FieldName.fromCamel("setBb").addSuffix(keyField.getType().name()).toLowerCamel();
			
			String lenValue = ""+blockLen;
			String lenIndex = makeBaseFieldNameRoot(lf).addSuffix("INDEX").toUpperSnake();
			String lenFuncName = FieldName.fromCamel("setBb").addSuffix(lf.getType().name()).toLowerCamel();
			
			
			
			//first setup index
			addLineComment("Compute index of new block");
			addLine(bf.getTypeName().toUpperCamel()+" p = buff->start;");
			String lenType = getBaseType(lf);

			
			
			String lgn = tn.addPrefix("get").addSuffix(lf.getName()).toLowerCamel();
			addLine(getBaseType(lf) + " len = " + lgn + "(buf,  previousBlock);");//this gets the block length
			addLine("BbBlock result = bbWrap(buf, block + len);");
			
			
		
			
			
			//first do the header stuff
			addLine();
			addLineComment("Add header fields");
			//write the key
			addLine(keyFuncName+"(buf, result, "+keyIndex+", "+keyValue+");");
			//write the length
			addLine(lenFuncName+"(buf, result, "+lenIndex+", "+lenValue+"); //sorry about the magic number. :(");
			
			
			//then do the params if we're doing params
			if(withParamsNotWithout) {
				addLine();
				addLineComment("Add base fields");
				
				for(BaseField f : fs) {
//					String value = f.getName().toLowerCamel();
//					String index = makeBaseFieldNameRoot(f).addSuffix("INDEX").toUpperSnake();
//					String funcName = FieldName.fromCamel("setBb").addSuffix(keyField.getType().name()).toLowerCamel();
//					addLine(funcName+"(buf, result, "+index+", "+value+");");
					if(f instanceof BoolField) {
						addBoolSetterGuts(f);
					} else {
						addBaseSetterGuts(f);
					}
				}
				
				
			}
			
			
			
			//update the block length
			
			
			//return the new block index
			addLine("return result");
			
			
			outdent();
			addLine("}");
		}
	}

}
