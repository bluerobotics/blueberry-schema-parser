/*
Copyright (c) 2024  Blue Robotics

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package com.bluerobotics.blueberry.schema.parser.writers;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import com.bluerobotics.blueberry.schema.parser.structure.BaseField;
import com.bluerobotics.blueberry.schema.parser.structure.BlockField;
import com.bluerobotics.blueberry.schema.parser.structure.BoolField;
import com.bluerobotics.blueberry.schema.parser.structure.BoolFieldField;
import com.bluerobotics.blueberry.schema.parser.structure.CompoundField;
import com.bluerobotics.blueberry.schema.parser.structure.EnumField;
import com.bluerobotics.blueberry.schema.parser.structure.EnumField.NameValue;
import com.bluerobotics.blueberry.schema.parser.structure.AbstractField;
import com.bluerobotics.blueberry.schema.parser.structure.FieldName;
import com.bluerobotics.blueberry.schema.parser.structure.FieldUtils;
import com.bluerobotics.blueberry.schema.parser.structure.ParentField;
import com.bluerobotics.blueberry.schema.parser.structure.Type;

public class CWriter extends SourceWriter {

	public CWriter(File dir) {
		super(dir);
	}

	@Override
	public void write(BlockField bf, String... headers) {
		
		
			makeHeaderFile(bf, headers);
			makeSourceFile(bf, headers);
		
		
	}
	private void makeHeaderFile(BlockField top, String... hs) {
//		List<BlockField> bfs = top.getBlockFields();
		startFile(hs);
	
		
		
		addSectionDivider("Includes");
		addLine("#include <stdbool.h");
		addLine("#include <stdint.h");
	
		addSectionDivider("Defines");
		
		
		addSectionDivider("Types");
		writeEnums(top);
		addLine("typedef BlueberryBlock BB;");
//		writeCompounds(top);
		
		addSectionDivider("Function Prototypes");
		addBaseFields(top, true);
		
		
		
		writeToFile(top.getName().toUpperCamel(),"h");
		
	}
	private void startFile(String... hs) {
		clear();
		for(String h : hs) {
			addBlockComment(h);
		}
		addSectionDivider("ATTENTION! THIS IS AN AUTOGENERATED FILE.\nIt's probably not a good idea to modify it. :^)");
	}
	private void makeSourceFile(BlockField top, String... hs) {
		startFile(hs);
	
		
		
		addSectionDivider("Includes");
		addLine("#include <stdbool.h");
		addLine("#include <stdint.h");
	
		addSectionDivider("Defines");
		writeDefines(top);
		
		addSectionDivider("Types");
		

		
		addSectionDivider("Function Prototypes");
	
		addSectionDivider("Source");
		addBaseFields(top, false);
		
		
		writeToFile(top.getName().toUpperCamel(),"c");
	
	}
	
//	private void writeCompounds(BlockField top) {
//		//first make a list of all unique enums
//		ArrayList<CompoundField> cs = new ArrayList<CompoundField>();
//		top.scanThroughBaseFields((f, p) -> {
//			if(f instanceof CompoundField) {
//				CompoundField c = (CompoundField)f;
//				if(c.getTypeName() != null) {
//					boolean found = false;
//					//check that this new one isn't the same as an existing one
//					for(CompoundField cf : cs) {
//						if(cf.getTypeName().equals(c)) {
//							found = true;
//							break;
//						}
//					}
//					if(!found) {
//						cs.add(c);
//					}
//				}
//			}
//		});	
//		for(CompoundField cf : cs) {
//			addDocComment(cf.getComment());
//			add("typedef struct {");
//			indent();
//			outdent();
//			addNewLine();
//			add("} "+cf.getTypeName().toUpperCamel());
//			addNewLine();
//			addNewLine();
//
//		}
//	}
	
	private void writeEnums(BlockField top) {
		//first make a list of all unique enums
		ArrayList<EnumField> es = new ArrayList<EnumField>();
		top.scanThroughBaseFields((f, p) -> {
			if(f instanceof EnumField) {
				EnumField e = (EnumField)f;
				boolean found = false;
				//check that this new one isn't the same as an existing one
				for(EnumField ef : es) {
					if(ef.getTypeName().equals(e)) {
						found = true;
						break;
					}
				}
				if(!found) {
					es.add(e);
				}
			}
		});	
		for(EnumField ef : es) {
			addDocComment(ef.getComment());
			addLine("typedef enum {");
			
			indent();
			for(NameValue nv : ef.getNameValues()) {
				
				
				String c = nv.getComment();
				if(c != null && !c.isBlank()) {
					c = "// "+c;
				} else {
					c = "";
				}
				addLine(nv.getName().toUpperSnake() + " = " + nv.getValue() + c);
				
				
			}
			outdent();
			
			addLine("} "+ef.getTypeName().toUpperCamel());
			
			addLine();

		}
	}
	
	private String makeFieldIndexName(BaseField f, BlockField p, boolean bitOrIndex) {
		String s = bitOrIndex ? "bit" : "index";
		return f.getName().addPrefix(p.getName()).addSuffix(s).toUpperSnake();
	}

	private void writeDefines(BlockField top) {
		top.scanThroughBaseFields((f, p) -> {
			if(f.getName() != null) {
				
				String name = makeFieldIndexName(f, top, false);
				writeDefine(name, ""+f.getIndex(),f);
				
			} else if(f instanceof BoolFieldField) {
				BoolFieldField bff = (BoolFieldField)f;
				for(BoolField bf : bff.getBoolFields()) {
					String name = makeFieldIndexName(bf, top, false);
					writeDefine(name, ""+bff.getIndex(),f);
					name = makeFieldIndexName(bf, top, true);
					writeDefine(name, ""+bf.getIndex(),f);
				}
				
			}
		});	
	}


	

	private void writeDefine(String name, String value, BaseField commentField) {
		String comment = commentField != null ? commentField.getComment() : "";
		if(comment == null) {
			comment = "";
		}
		boolean multiLine = comment.split("\\R").length > 1 ;
		String c = "";
		if(multiLine) {
			addBlockComment(comment);
		} else {
			String s = comment;
			if(!s.isBlank()) {
				c = "    //"+comment;
			}
		}
		addIndent();
		add("#define ");
		add(name);
		add(" (" + value + ")");
		if(!c.isEmpty()) {
			add(c);
		}
		addLine();
		
	}


	private void addBaseFields(BlockField top, boolean protoNotDeclaration) {
		top.scanThroughBaseFields((f, p) -> {
			if(f instanceof BoolFieldField) {
				addBoolGetterPrototype((BoolFieldField)f, top, protoNotDeclaration);
			
			} else if(f instanceof CompoundField) {
				addCompoundGetterPrototype((CompoundField)f, top, protoNotDeclaration);
			} else {
				addBaseGetSetter(f,p, true, protoNotDeclaration);
				if(!protoNotDeclaration) {
					addBaseGetSetContents(f,p, true);
				}
				addBaseGetSetter(f,p, false, protoNotDeclaration);
				if(!protoNotDeclaration) {
					addBaseGetSetContents(f,p, false);
				}
			}
		});
	}
	private void addCompoundGetterPrototype(CompoundField f, BlockField top, boolean protoNotDeclaration) {
		// TODO Auto-generated method stub
		
	}

	private void addBoolGetterPrototype(BoolFieldField f, BlockField top,  boolean protoNotDeclaration) {
		for(BoolField b : f.getBoolFields()) {
			addBaseGetSetter(b, top, true, protoNotDeclaration);
			if(!protoNotDeclaration) {
				addBoolGetSetContents(b,top, f, true);
			}
			addBaseGetSetter(b, top, false, protoNotDeclaration);
			if(!protoNotDeclaration) {
				addBoolGetSetContents(b,top, f, false);
			}
		}
		
		
	}

	private void addBaseGetSetter(BaseField f, ParentField p, boolean getterNotSetter, boolean protoNotDeclaration) {
		if(f.getName() != null) {
			String gs = getterNotSetter ? "get" : "set";
			String c = f.getName().toLowerCamel()+" field of the " + p.getName().toLowerCamel() + " " + p.getTypeName().toUpperCamel()+ "\n"+f.getComment();
			String rt = getBaseType(f.getType());
			String function = f.getName().addPrefix(p.getName()).toUpperCamel();
			String paramType = "BB*";
			String paramName = p.getName().toLowerCamel();
			addDocComment( gs + "s the " + c);
			
			
			
			String s = getterNotSetter ? rt : "void";
			s += " " + gs + "Bb" + function + "(" + paramType + " " + paramName;
			s += getterNotSetter ? ")" : ", " + rt + " " + f.getName().toLowerCamel() + ")";
			s += protoNotDeclaration ? ";" : "{";
			addLine(s);

			
		}
	}
	private void addBaseGetSetContents(BaseField f, ParentField p, boolean getterNotSetter) {
		String rt = getBaseType(f.getType());
		String paramName = p.getName().toLowerCamel();
		String dn = makeFieldIndexName(f, (BlockField)p, true);

		indent();
	
		if(getterNotSetter) {
			
			String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("get").toLowerCamel();
			addLine("return " + functionName + "(" + paramName + ", " + dn +  ");");
		} else {
			String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("set").toLowerCamel();
			addLine(functionName + "(" + paramName + ", " + dn + ", " + f.getName().toLowerCamel() + ");");
			
			
		}
		outdent();	
		addLine();
		addLine("}");
	
			
			
		
	}
	private void addBoolGetSetContents(BaseField f, ParentField p, BoolFieldField bff, boolean getterNotSetter) {
		String paramName = p.getName().toLowerCamel();
		String dn = makeFieldIndexName(f, (BlockField)p, true);
		String dbn = makeFieldIndexName(f, (BlockField)p, false);
		indent();
	
		if(getterNotSetter) {
			
			String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("get").toLowerCamel();
			
			addLine("return " + functionName + "(" + paramName + ", " + dn + ", " + dbn + ");");
		} else {
			String functionName = FieldName.fromSnake(f.getType().name()).addPrefix("set").toLowerCamel();
			addLine(functionName + "(" + paramName + ", " + dn + ", " + dbn + ", " + f.getName().toLowerCamel() + ");");
			
			
		}
		outdent();	
		addLine();
		addLine("}");
	
			
			
		
	}
	
	
	private String getBaseType(Type t) {
		String rt = "";
		switch(t) {
		case COMPOUND:
		case ARRAY:
		case BLOCK:
			break;
		case BOOL:
			rt = "bool";
			break;
		case BOOLFIELD:
			rt = "uint8_t";
			break;
		case FLOAT32:
			rt = "float";
			break;
		case INT16:
			rt = "int16_t";
			break;
		case INT32:
			rt = "int32_t";
			break;
		case INT8:
			rt = "int8_t";
			break;
		case UINT16:
			rt = "uint16_t";
			break;
		case UINT32:
			rt = "uint32_t";
			break;
		case UINT8:
			rt = "uint8_t";
			break;
		default:
			break;
		
		}
		return rt;
	}
	

}
